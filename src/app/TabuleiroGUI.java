/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import Iterators.BotoesIterator;
import Mementos.CareTake;
import Mementos.Memento;
import Prototype.Peca;
import States.Tabuleiro.TabuleiroFinalizado;
import States.Tabuleiro.TabuleiroIniciado;
import States.Tabuleiro.TabuleiroState;
import Strategies.JogadorStrategy;
import Strategies.TipoJogador;
import java.awt.event.ActionEvent;
import java.awt.event.WindowEvent;


/**
 *
 * @author Junnyor
 */
public class TabuleiroGUI extends javax.swing.JFrame {
    
    private Tabuleiro tabuleiro;
    
    private int quantidadeClick = 1;
    
    public Botao[][] botoes;
    
    private int mementoPosicao = -1;
    
    static TabuleiroGUI tabuleiroGUI;
    
    private JogadorStrategy jogador;
    
    private TabuleiroState estado;
    
    private CareTake careTake;
    
    private Memento memento;
    
    public int getMementoPosicao() {
        return this.mementoPosicao;
    }
    
    public void setMementoPosicao(int mementoPosicao) {
        this.mementoPosicao = mementoPosicao;
    }
    
    public void setQuantidadeClick(int quantidadeClick) {
        this.quantidadeClick = quantidadeClick;
    }
    
    public int getQuantidadeClick() {
        return this.quantidadeClick;
    }
    
    public Memento salvarMemento() {
        this.memento = new Memento(this);
        return this.memento;
    }
    
    public void getMemento(Memento ultimoEstado) {
       this.memento = ultimoEstado;
    }
    
    public void setBotoes(Botao[][] botoes) {
        this.botoes = botoes;
    }
    
    public Botao[][] getBotoes() {
        return this.botoes;
    }
    
    /**
     * Creates new form Tabuleiro
     */
    public TabuleiroGUI() {
        initComponents();
        this.careTake = new CareTake();
    }
    
    /**
     * 
     */
    public void init() {       
        
        this.lbFinalizado.setText(this.tabuleiro.getEstado().getNome());       
        
        this.lbJogador.setText(this.jogador.getTipo().getNome());    
    }
    
    /**
     * 
     * @return JogadorStrategy
     */
    public JogadorStrategy getJogador() {
        return this.jogador;
    }
    
    /**
     * 
     * @param jogador 
     */
    public void setJogador(JogadorStrategy jogador) {
        //Iniciando com jogador do tipo X
        this.jogador = jogador;
    }
    
    /**
     * 
     * @return TabuleiroState
     */
    public TabuleiroState getEstado() {
        return this.estado;        
    }
    
    /**
     * 
     * @param estado 
     */
    public void setEstado(TabuleiroState estado) {
        this.estado = estado;        
        this.tabuleiro.setEstado(this.estado);        
    }
    
    /**
     * 
     * @param tabuleiro 
     */
    public void setTabuleiro(Tabuleiro tabuleiro) {
        this.tabuleiro = tabuleiro;
    }
  
    /**
     * 
     * @return 
     */
    public Tabuleiro getTabuleiro() {
        return this.tabuleiro;
    }
    
    public void salvarEstado() {     
        this.careTake.add(salvarMemento());
        this.mementoPosicao++;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbJogador = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnRestaurar = new javax.swing.JButton();
        lbJogoFinalizado = new javax.swing.JLabel();
        btnReiniciar = new javax.swing.JButton();
        lbFinalizado = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        lbJogador.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lbJogador.setText("X");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setText("Jogador");

        btnRestaurar.setText("Voltar uma jogada");
        btnRestaurar.setEnabled(false);
        btnRestaurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestaurarActionPerformed(evt);
            }
        });

        btnReiniciar.setText("Reiniciar");
        btnReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReiniciarActionPerformed(evt);
            }
        });

        lbFinalizado.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lbFinalizado.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbFinalizado)
                        .addGap(18, 18, 18)
                        .addComponent(lbJogoFinalizado))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRestaurar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReiniciar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbJogador)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRestaurar)
                    .addComponent(btnReiniciar))
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lbJogador))
                .addGap(73, 73, 73)
                .addComponent(lbJogoFinalizado)
                .addGap(11, 11, 11)
                .addComponent(lbFinalizado)
                .addContainerGap(55, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRestaurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestaurarActionPerformed
        this.mementoPosicao--;
        
        this.memento = this.careTake.get(this.mementoPosicao);  
        
        tabuleiroGUI = (TabuleiroGUI) this.memento.getEstado();
        
        Botao[][] botes = tabuleiroGUI.getBotoes();
        
        for(int i = 0; i < 3; i++) {
            for(int j = 0; j < 3; j++) {
                System.out.println("-"+botes[i][j].getText());
            }
        }
        
        tabuleiroGUI.setBotoes(tabuleiroGUI.getBotoes());
        tabuleiroGUI.setTabuleiro(tabuleiroGUI.getTabuleiro());
        tabuleiroGUI.setEstado(tabuleiroGUI.getEstado());
        tabuleiroGUI.setJogador(tabuleiroGUI.getJogador());
        tabuleiroGUI.setQuantidadeClick(tabuleiroGUI.getQuantidadeClick());
        tabuleiroGUI.setMementoPosicao(tabuleiroGUI.getMementoPosicao());
        tabuleiroGUI.desenhar();
        tabuleiroGUI.init();
        
    }//GEN-LAST:event_btnRestaurarActionPerformed

    private void btnReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReiniciarActionPerformed
        tabuleiroGUI.setBotoes(new Botao[3][3]);
        tabuleiroGUI.setTabuleiro(new Tabuleiro());
        tabuleiroGUI.setEstado(new TabuleiroIniciado());
        TipoJogador tipoJogador = TipoJogador.values()[0];
        tabuleiroGUI.setJogador(tipoJogador.obterJogador());
        tabuleiroGUI.desenhar();
        tabuleiroGUI.salvarEstado();
        tabuleiroGUI.init();
        tabuleiroGUI.setVisible(true);
        tabuleiroGUI.setQuantidadeClick(1);
        this.btnRestaurar.setEnabled(false);
        this.lbJogador.setText(this.jogador.getTipo().getNome());
        this.jLabel2.setText("Jogador");
        this.lbFinalizado.setText(this.tabuleiro.getEstado().getNome());
        this.lbFinalizado.setEnabled(true);
    }//GEN-LAST:event_btnReiniciarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TabuleiroGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TabuleiroGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TabuleiroGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TabuleiroGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                tabuleiroGUI = TabuleiroGUI.getInstance();
                tabuleiroGUI.setBotoes(new Botao[3][3]);
                tabuleiroGUI.setTabuleiro(new Tabuleiro());
                tabuleiroGUI.setEstado(new TabuleiroIniciado());
                TipoJogador tipoJogador = TipoJogador.values()[0];
                tabuleiroGUI.setJogador(tipoJogador.obterJogador());
                tabuleiroGUI.desenhar();
                tabuleiroGUI.salvarEstado();
                tabuleiroGUI.init();
                tabuleiroGUI.setVisible(true);
            }
        });
    }
    
    /**
     * Implementação do padrão singleton
     * @return 
     */
    public static TabuleiroGUI getInstance() {
        if(tabuleiroGUI != null) {
            return  null;
        }        
        return new TabuleiroGUI();
    }

    /**
     * Função para colocar as peças nos botões
     */
    private void desenhar() {
        this.jPanel1.removeAll();
        this.jPanel1.revalidate();
        this.jPanel1.repaint();
        
        int x = 0, y = 0;         
        for(int i = 0; i < 3; i++) {
            for(int j = 0; j < 3; j++) {
                Botao botao = this.botoes[i][j];
                if(botao == null) {
                    botao = new Botao();
                    botao.setLinha(i);
                    botao.setColuna(j);
                    botao.setName("peca"+i+""+j);
                    //botao.setText("peca"+i+""+j);
                    botao.setEnabled(true);
                    botao.setBounds(x, y, 70, 70);
                    Botao btn = botao;
                    botao.addActionListener(new java.awt.event.ActionListener() {
                        @Override
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            botaoOnClick(evt, btn.getLinha(), btn.getColuna());
                        }
                    });

                    Peca peca = this.jogador.getTipo();
                    peca.setNome(peca.getNome());                
                    botao.setPeca(peca);            
                    botao.setText(botao.getText());

                    this.botoes[i][j] = botao;
                }
                this.jPanel1.add(botao);
                x += 100;
            }
            y += 100;
            x = 0;
        }        
    }
    
    
    /**
     * 
     * @param ae
     * @param linha
     * @param coluna 
     */
    public void botaoOnClick(ActionEvent ae, int linha, int coluna) {
        
        //Salvando estado anterior
        this.salvarEstado();
        
        //Botão clicado
        Botao botaoClicado = this.botoes[linha][coluna];
        
        TipoJogador tipoJogador = null;
        
        //this.botoes[linha][coluna].setPeca(this.jogador.getTipo());
        botaoClicado.setText(this.jogador.getTipo().getNome());
        botaoClicado.getPeca().setNome(this.jogador.getTipo().getNome());
        
        //Se for do tipo X, troco para O
        //Se for do tipo O, troco para X
        if(botaoClicado.getPeca().getNome().equals("X")) {
            tipoJogador = TipoJogador.values()[1];
        } else {
            tipoJogador = TipoJogador.values()[0];
        }        

        //Iterator
        BotoesIterator iterator = new BotoesIterator(this.botoes);
        
        //Verificando as linhas e colunas
        boolean finalizou = this.verificarLinhasColunas(iterator, botaoClicado);        
        
        //Se o jogo não terminou
        if(!finalizou) {
            //Reseto as posições do iterator
            iterator.reset();
            //Verificando colunas e linhas
            finalizou = this.verificarColunasLinhas(iterator, botaoClicado);
        }
        
        //Se o jogo não terminou
        if(!finalizou) {
            //Verificando a diagonal primária
            finalizou = this.verificarDiagonalPrimaria(botaoClicado);
        }
        
        //Se o jogo não terminou
        if(!finalizou) {
            //Verificando a diagonal secundária
            finalizou = this.verificarDiagonalSecundaria(botaoClicado);
        }
        
        //Se o jogo terminou
        if(finalizou) {
           this.tabuleiro.setEstado(new TabuleiroFinalizado());
           this.tabuleiro.finalizar();
           this.lbJogador.setText(this.jogador.getTipo().getNome());
           this.jLabel2.setText("Vencedor");
           this.lbFinalizado.setText(this.tabuleiro.getEstado().getNome());
           this.lbFinalizado.setEnabled(true);
           
           this.desabilitarBotoes();
        } else {
            this.jogador = tipoJogador.obterJogador();
            this.lbJogador.setText(this.jogador.getTipo().getNome());
        }
        
        //Caso houve clique em todos os botões, o jogo terminou em empate
        if(3 * 3 == this.quantidadeClick) {
            this.tabuleiro.setEstado(new TabuleiroFinalizado());
            this.tabuleiro.finalizar();
            this.lbJogador.setText("#empate");
            this.jLabel2.setText("Não houve vencedor");
            this.lbFinalizado.setText(this.tabuleiro.getEstado().getNome());
            this.lbFinalizado.setEnabled(true);           
            this.desabilitarBotoes();
        }        
        
        this.quantidadeClick++;
        
        if(this.mementoPosicao >= 1) {
            this.btnRestaurar.setEnabled(true);
        }
    }
    /**
     * Função para desabilitar os botões
     */
    private void desabilitarBotoes() {
        for(int i = 0; i < 3; i++) {
            for(int j = 0; j < 3; j++) {
                this.botoes[i][j].setEnabled(false);
            }
        }
    }
    
    /**
     * Função para verificar as linhas e depois as colunas
     * @param iterator
     * @param botaoClicado
     * @return 
     */
    private boolean verificarLinhasColunas(BotoesIterator iterator, Botao botaoClicado) {
        boolean finalizou = false;
        while(iterator.hasNextLine()) {
            
            if(finalizou)
                break;
            
            while(iterator.hasNextColumn()) {
                Botao botao = (Botao) iterator.nextColumn();                
                if(botao.getText().equals(botaoClicado.getPeca().getNome())) {
                    finalizou = true;
                } else {
                    finalizou = false;
                    break;
                }
            }
            iterator.resetColumn();
            iterator.nextLine(); 
        }
        
        return finalizou;
    }
    
    /**
     * Função para verificar as colunas e depois as linhas
     * @param iterator
     * @param botaoClicado
     * @return 
     */
    private boolean verificarColunasLinhas(BotoesIterator iterator, Botao botaoClicado) {
        boolean finalizou = false;
        
        //Iterando sobre as colunas
        while(iterator.hasNextColumn()) {
            
            //Caso encontrou 3 do mesmo tipo nas linhas, saio da iteração
            if(finalizou)
                break;
            
            //Itrando sobre as linhas
            while(iterator.hasNextLine()) {
                Botao botao = (Botao) iterator.nextLine();
                
                if(botao.getText().equals(botaoClicado.getPeca().getNome())) {
                    finalizou = true;
                } else {
                    finalizou = false;
                    break;
                }                
            }
            //Resetando o contador de linhas
            iterator.resetLine();
            //Passando para a próxima coluna
            iterator.nextColumn();
        }
        
        return finalizou;
    }
    
    /**
     * Função para percorrer a diagonal primária
     * @param botao
     * @return 
     */
    private boolean verificarDiagonalPrimaria(Botao botao) {
        boolean finalizou = true;
        for(int i = 0; i < 3; i++) {
            for(int j = 0; j < 3; j++) {
                if(i == j) {
                    finalizou = this.botoes[i][j].getText().equals(botao.getPeca().getNome());
                }
            }
            if(!finalizou) {
                break;
            }
        }
        
        return finalizou;
    }
    
    /**
     * Função para verificar a diagonal secundária
     * @param botao
     * @return 
     */
    private boolean verificarDiagonalSecundaria(Botao botao) {
        boolean finalizou = true;
        for(int i = 0; i < 3; i++) {
            for(int j = 0; j < 3; j++) {
                if((i + j) == 2) {
                    finalizou = this.botoes[i][j].getText().equals(botao.getPeca().getNome());
                }
            }
            if(!finalizou) {
                break;
            }
        }        
        return finalizou;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReiniciar;
    private javax.swing.JButton btnRestaurar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbFinalizado;
    private javax.swing.JLabel lbJogador;
    private javax.swing.JLabel lbJogoFinalizado;
    // End of variables declaration//GEN-END:variables
}
